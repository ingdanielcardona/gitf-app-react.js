{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.jsx","hooks/useFetchGifs.jsx","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,sBAAKC,UAAY,yCAAjB,UACI,qBAAKC,IAAKF,EAAKG,IAAI,UACnB,4BAAIJ,Q,uBCWDK,EAjBK,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,8DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPM,EAAe,SAAEb,GAC1B,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WAENlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,GClBEK,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEtB,EAAkCa,EAAab,GAAjCW,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAGtB,OACI,qCACI,oBAAIlB,UAAU,mCAAd,SAAkDI,IAEjDc,GAAW,mBACRlB,UAAU,mCADF,wBAIZ,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aChBxBW,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MCdnCuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.90b85306.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className = 'card animate__animated animate__fadeIn'>\n            <img src={url} alt=\"title\" />\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=DLaaPGO67ngCxjSylcZqQO74e8jhKYjE`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}\n\nexport default getGifs;","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport getGifs from '../helpers/getGifs'\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    useEffect(() => {\n        \n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                }) \n            })\n    }, [category])\n\n    return state;\n};\n\nexport default useFetchGifs;","import React, { useEffect, useState } from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs.jsx';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3 className='animate__animated animate__flash'>{category}</h3>\n\n            {loading && <p\n                className='animate__animated animate__flash'\n            >Loading...</p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img =>\n                        <GifGridItem\n                            key={img.id}\n                            {...img} />\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","// @flow\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['One Punch, Dragon ball, Samurai X'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map(category =>\n                        <GifGrid \n                            key = {category}\n                            category={category} />\n                    )\n                }\n            </ol>\n        </>\n    );\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}